node('master') {

    if (params.CLIENT.toString().isEmpty()) { 
        CLIENT="${DIGITE_CLIENT}"
    } 
    else {
        CLIENT="${CLIENT}"
    }

    COLUNAS = sh (script: """ echo ${CLIENT} | tr '/' ' ' | awk '{print NF}' """, returnStdout: true).trim()
    CLIENT = sh (script: """ echo ${CLIENT} | tr '/' ' ' | cut -d ' ' -f ${COLUNAS} """, returnStdout: true).trim()
    NOME_CLIENT = sh (script: """ echo ${EMICLIENTSSOR} | cut -d '.' -f 1 """, returnStdout: true).trim()
    LINHAS_CHAVE_SOLICITANTE = sh (script: """ echo ${CHAVE_SOLICITANTE_ASC} | wc -c """, returnStdout: true).trim()
    String EMAIL = "${EMAIL}"
    
    
    stage('DeleteDir'){
        sh """
        rm -rf keys2.txt keys.txt *.nsk.gpg *.nsk chave_solicitante.asc *.zip 2>/dev/null
        """
    }
    
    stage("Baixando em S3 chave ${CLIENT}"){
        KEY_S3 = sh (script: """echo my_keys/${CLIENT}""", returnStdout: true).trim()
        sh "aws s3 cp s3://key/${KEY_S3} ."

    }
    
    stage('Formatando chaves') {
        sh """
            echo "-----BEGIN PGP PUBLIC KEY BLOCK-----" > chave_solicitante.asc
            echo "" >> chave_solicitante.asc
            echo ${CHAVE_SOLICITANTE_ASC} | cut -d " " -f 6-${LINHAS_CHAVE_SOLICITANTE} | tr ' ' '\n' | sed 's/PGP//' | sed 's/PUBLIC//' | sed 's/KEY//' | sed 's/BLOCK-----//' | tr -s '\n'| sed 's/-----END/-----END PGP PUBLIC KEY BLOCK-----/' >> chave_solicitante.asc
            
        """
    }
    
    stage ("Importando chaves") {
        sh """
            gpg --import chave_solicitante.asc
            gpg --list-keys
            gpg --list-keys > keys.txt
            cat keys.txt | grep -E '^uid' | sed 's/uid//' > keys2.txt
            cat keys2.txt | tr -s ' ' | sed 's/\$/"/' | sed 's/^/"/' | sed 's/" /"/' > keys.txt
        """
    }
    
    stage ("Criptografando ${CLIENT}"){
        KEY_DEVOPS = sh (script: """ cat keys.txt | awk NR==1 """, returnStdout: true).trim()
        KEY_SOLICITANTE = sh (script: """ cat keys.txt | awk NR==2 """, returnStdout: true).trim()
        sh """
        gpg --always-trust --local-user ${KEY_DEVOPS} --recipient ${KEY_SOLICITANTE} --encrypt ${CLIENT}
        gpg --batch --yes --delete-key ${KEY_SOLICITANTE}
        mkdir ${NOME_CLIENT} && cp conductor_devops.asc readme.txt ${NOME_CLIENT}.nsk.gpg ${NOME_CLIENT}
        sed -i 's/emissor.nsk.gpg/${NOME_CLIENT}.nsk.gpg/' ${NOME_CLIENT}/readme.txt
        zip -r ${NOME_CLIENT}.zip ${NOME_CLIENT}/*
        rm -rf ${NOME_CLIENT}
        """
    }
    
    stage("Enviando para ${EMAIL}"){
        sh """ ./sendEmail -t ${EMAIL} -m 'Segue arquivo com a chave encriptada do emissor ${NOME_CLIENT}.' -a ${NOME_CLIENT}.zip  -s 102.168.0.15:587 -u 'Chave encriptada do emissor ${NOME_CLIENT}' -f default@pag.com.br"""
    } 
        
}
